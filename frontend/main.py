import streamlit as st
import requests

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Go-—Å–µ—Ä–≤–µ—Ä–∞
API_BASE_URL = "http://localhost:8080"

st.set_page_config(
    page_title="The Sweets Of Life",
    page_icon="üç∞",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "jwt_token" not in st.session_state:
    st.session_state["jwt_token"] = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å JWT —Ç–æ–∫–µ–Ω–æ–º
def api_request(method, endpoint, **kwargs):
    headers = kwargs.pop("headers", {})
    if st.session_state["jwt_token"]:
        headers["Authorization"] = f"Bearer {st.session_state['jwt_token']}"
    response = requests.request(method, f"{API_BASE_URL}{endpoint}", headers=headers, **kwargs)
    return response

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
def sign_up(fullname, username, email, password, phone_number):
    response = requests.post(
        f"{API_BASE_URL}/auth/sign-up",
        json={
            "fullname": fullname,
            "username": username,
            "email": email,
            "password_hash": password,
            "phone_number": phone_number,
        },
    )
    return response

def sign_in(username, password):
    response = requests.post(f"{API_BASE_URL}/auth/sign-in", json={"username": username, "password": password})
    return response

def make_order(user_id, delivery, cakes, payment_method):
    data = {
        "user_id": user_id,
        "delivery": delivery,
        "cakes": cakes,
        "payment_method": payment_method
    }
    response = api_request("POST", "/api/make-order", json=data)
    return response

def view_orders():
    response = api_request("GET", "/api/view-orders")
    return response

def cancel_order(order_id):
    data = {"order_id": order_id}
    response = api_request("POST", "/api/delete-order", json=data)
    return response

def get_cakes():
    response = api_request("GET", "/api/cakes")
    return response

def get_delivery_points():
    response = api_request("GET", "/api/delivery-points")
    return response

def admin_sign_in(username, password):
    response = requests.post(f"{API_BASE_URL}/adm/sign-in", json={"username": username, "password": password})
    return response

def authorization_page():
    st.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    auth_action = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–í–æ–π—Ç–∏", "–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"])

    username = st.text_input("–ù–∏–∫–Ω–µ–π–º")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if auth_action == "–í–æ–π—Ç–∏":
        if st.button("–í–æ–π—Ç–∏"):
            response = sign_in(username, password)
            if response.status_code == 200:
                result = response.json()
                st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
                st.session_state["jwt_token"] = result.get("token")
                st.session_state["role"] = "user"
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    elif auth_action == "–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        if st.button("–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
            response = admin_sign_in(username, password)
            if response.status_code == 200:
                result = response.json()
                st.success("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
                st.session_state["jwt_token"] = result.get("token")
                st.session_state["role"] = "admin"
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    elif auth_action == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        fullname = st.text_input("–§–ò–û")
        email = st.text_input("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞")
        phone_number = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            response = sign_up(fullname, username, email, password, phone_number)
            if response.status_code == 200:
                st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            else:
                st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

def manage_users_page():
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    response = api_request("GET", "/adm/manage-users/users")
    if response.status_code == 200:
        users = response.json()
        for user in users:
            st.subheader(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['fullname']} ({user['email']})")
            st.text(f"–ù–∏–∫–Ω–µ–π–º: {user['username']}")
            st.text(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}")

            if st.button(f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['username']}", key=user['id']):
                delete_response = api_request("POST", f"/adm/manage-users/delete-user/{user['id']}")
                if delete_response.status_code == 200:
                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} —É–¥–∞–ª–µ–Ω!")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


def manage_cakes_page():
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ç–∞–º–∏")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä—Ç–æ–≤
    response = api_request("GET", "/adm/manage-cakes/cakes")
    if response.status_code == 200:
        cakes = response.json()
        for cake in cakes:
            st.subheader(f"{cake['description']} - {cake['price']} $")
            st.text(f"ID: {cake['id']}, –í–µ—Å: {cake['weight']} –≥")

            # –£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä—Ç
            if st.button(f"–£–¥–∞–ª–∏—Ç—å {cake['description']}", key=cake['id']):
                delete_response = api_request("POST", f"/adm/manage-cakes/remove-cake", json={"id": cake["id"]})
                if delete_response.status_code == 200:
                    st.success(f"{cake['description']} —É–¥–∞–ª–µ–Ω!")
                else:
                    st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—Ä—Ç–∞")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ—Ä—Ç–∞
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ—Ä—Ç")
        new_description = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ")
        new_price = st.number_input("–¶–µ–Ω–∞", min_value=0.0, step=0.5)
        new_weight = st.number_input("–í–µ—Å (–≥)", min_value=0, step=50)
        new_full_description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ")
        if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ç"):
            add_response = api_request("POST", "/adm/manage-cakes/add-cake", json={
                "description": new_description,
                "price": int(new_price),
                "weight": int(new_weight),
                "full_description": new_full_description
            })
            if add_response.status_code == 200:
                st.success("–¢–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                st.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ç–∞")


def database_management_page():
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if st.button("–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"):
        backup_response = api_request("POST", "/adm/database/backup")
        if backup_response.status_code == 200:
            st.success("–ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"):
        recovery_response = api_request("POST", "/adm/database/recovery")
        if recovery_response.status_code == 200:
            st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            st.error("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

def main():
    st.sidebar.title("–ú–µ–Ω—é")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if st.session_state["jwt_token"]:
        if st.session_state.get("role") == "admin":
            menu = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ç–∞–º–∏", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", "–í—ã–π—Ç–∏"])
            if menu == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏":
                manage_users_page()
            elif menu == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ç–∞–º–∏":
                manage_cakes_page()
            elif menu == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö":
                database_management_page()
            elif menu == "–í—ã–π—Ç–∏":
                st.session_state["jwt_token"] = None
                st.session_state["role"] = None
                st.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
                st.rerun()
        else:
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if st.session_state.get("current_page") == "cake_detail":
                cake_id = st.session_state.get("current_cake_id")
                if cake_id:
                    cake_detail_page(cake_id)
            else:
                menu = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ö–∞—Ç–∞–ª–æ–≥", "–ú–ê–ò –∑–∞–∫–∞–∑—ã", "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", "–í—ã–π—Ç–∏"])
                if menu == "–ö–∞—Ç–∞–ª–æ–≥":
                    catalog_page()
                elif menu == "–ú–ê–ò –∑–∞–∫–∞–∑—ã":
                    orders_page()
                elif menu == "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
                    create_order_page()
                elif menu == "–í—ã–π—Ç–∏":
                    st.session_state["jwt_token"] = None
                    st.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    else:
        menu = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"])
        if menu == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
            authorization_page()


# # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
# def catalog_page():
#     st.title("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ—Ä—Ç–æ–≤")
#     response = get_cakes()
#     if response.status_code == 200:
#         cakes = response.json()
#
#         # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—Ä—Ç–æ–≤
#         cols = st.columns(4)  # –í—ã–≤–µ–¥–µ–º 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–æ—Ä—Ç–æ–≤
#
#         for i, cake in enumerate(cakes):
#             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ—Ä—Ç–∞
#             col = cols[i % 4]  # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
#             with col:
#                 # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—Ä—Ç–∞
#                 if 'image_url' in cake:  # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#                     st.image(cake['image_url'], use_container_width=True)
#                 else:
#                     st.image("https://img.freepik.com/free-photo/chocolate-cake-with-blueberry-cream_140725-10903.jpg", use_container_width=True)  # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#                 # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —Ç–æ—Ä—Ç–∞
#                 st.subheader(cake["description"])
#                 st.text(f"–¶–µ–Ω–∞: {cake['price']} $")
#
#     else:
#         st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

def update_order(order_id, payment_method):
    data = {"order_id": order_id, "payment_method": payment_method}
    response = api_request("POST", "/api/change-order", json=data)
    return response

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
def orders_page():
    st.title("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã")
    response = view_orders()

    if response.status_code == 200:
        try:
            orders_data = response.json()["Orders"]
            if not orders_data:
                st.text("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç! –ö—É–ø–∏—Ç–µ —É–∂–µ —á—Ç–æ-–Ω–∏–±—É–¥—å :]")
                return

            for order_data in orders_data:
                order = order_data["Ord"]
                cakes = order_data["Cakes"]

                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                st.subheader(f"–ó–∞–∫–∞–∑ #{str(order['id'])}")
                st.text(f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['time']}")
                st.text(f"–°—Ç–∞—Ç—É—Å: {order['order_status']}")
                st.text(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order['payment_method']}")
                st.text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order['cost']} $.")

                for cake in cakes:
                    st.text(f"–¢–æ—Ä—Ç: {cake['description']} ({cake['price']} $, {cake['weight']} –≥)")

                # –§–æ—Ä–º–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                with st.expander(f"–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}"):
                    new_payment_method = st.radio(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                        ["Card", "Cash", "Online Payment"],
                        index=["Card", "Cash", "Online Payment"].index(order["payment_method"]),
                        key=f"payment_method_{order['id']}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID –∑–∞–∫–∞–∑–∞
                    )
                    if st.button(f"–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}"):
                        update_response = update_order(order['id'], new_payment_method)
                        if update_response.status_code == 200:
                            st.success(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã")

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
                if st.button(f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order['id']}"):
                    cancel_response = cancel_order(order['id'])
                    if cancel_response.status_code == 200:
                        st.warning(f"–ó–∞–∫–∞–∑ #{order['id']} –æ—Ç–º–µ–Ω–µ–Ω!")
                    else:
                        st.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")
        except KeyError:
            st.error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∞ 'Orders' –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
def create_order_page():
    st.title("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ—Ä—Ç–æ–≤
    cakes_response = get_cakes()
    if cakes_response.status_code == 200:
        cakes = cakes_response.json()
        selected_cakes = []
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞")

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å—ã
        for cake in cakes:
            if st.checkbox(f"{cake['description']} - {cake['price']} $.", key=cake['id']):
                selected_cakes.append(cake)

        if not selected_cakes:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ—Ä—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞.")
            return
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä—Ç–æ–≤.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_response = get_delivery_points()
    if delivery_response.status_code == 200:
        delivery_points = delivery_response.json()
        delivery_point = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", [point['address'] for point in delivery_points])
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–Ω–∫—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return

    # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    payment_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", ["Card", "Cash", "Online Payment"])

    if st.button("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"):
        selected_cake_ids = [cake['id'] for cake in selected_cakes]
        delivery_point_id = next(point['id'] for point in delivery_points if point['address'] == delivery_point)

        order_data = {
            "user_id": 3,  # –ù—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "delivery": {
                "point_id": delivery_point_id,
                "cost": sum(cake['price'] for cake in selected_cakes),
                "status": "pending",
                "weight": sum(cake['weight'] for cake in selected_cakes),
            },
            "cakes": [{"id": cake["id"], "description": cake["description"], "price": cake["price"], "weight": cake["weight"]} for cake in selected_cakes],
            "payment_method": payment_method
        }

        order_response = make_order(order_data["user_id"], order_data["delivery"], order_data["cakes"], order_data["payment_method"])

        if order_response.status_code == 200:
            st.success("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        else:
            st.error("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

def catalog_page():
    st.title("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ—Ä—Ç–æ–≤")
    response = get_cakes()
    if response.status_code == 200:
        cakes = response.json()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—Ä—Ç–æ–≤
        cols = st.columns(4)

        for i, cake in enumerate(cakes):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ—Ä—Ç–∞
            col = cols[i % 4]
            with col:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—Ä—Ç–∞
                st.image(
                    cake.get('image_url', "https://img.freepik.com/free-photo/chocolate-cake-with-blueberry-cream_140725-10903.jpg"),
                    use_container_width=True
                )
                if st.button(cake["description"], key=cake["id"]):
                    st.session_state["current_cake_id"] = cake["id"]
                    st.session_state["current_page"] = "cake_detail"
                    st.rerun()
                st.text(f"–¶–µ–Ω–∞: {cake['price']} $")
    else:
        st.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")


def cake_detail_page(cake_id):
    st.title("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä—Ç–µ")
    response = api_request("GET", f"/api/cakes/{cake_id}")  # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä—Ç–∞ –ø–æ ID
    if response.status_code == 200:
        cake = response.json()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä—Ç–µ
        st.image(
            cake.get('image_url', "https://img.freepik.com/free-photo/chocolate-cake-with-blueberry-cream_140725-10903.jpg"),
            use_container_width=True
        )
        st.subheader(cake["description"])
        st.text(f"–¶–µ–Ω–∞: {cake['price']} $")
        st.text(f"–í–µ—Å: {cake['weight']} –≥")
        st.text("–û–ø–∏—Å–∞–Ω–∏–µ:")
        st.write(cake["full_description"])

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if st.button("–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥"):
            st.session_state["current_page"] = "catalog"  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥
    else:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä—Ç–µ")

if __name__ == "__main__":
    main()
